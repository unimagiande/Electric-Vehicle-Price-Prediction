#To mute warnings
import warnings
warnings.filterwarnings("ignore")

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from pandas_profiling import ProfileReport
from sklearn.preprocessing import LabelEncoder
from scipy import stats

print(f' Libraries successfully imported')

data = pd.read_csv("Electric_cars_dataset.csv", nrows = 10000)
data

# Display first 5 rows

data.head()

#Display info about the dataset
data.info()

# perform descriptive analysis
data.describe().T

data.shape

profile = ProfileReport(data, title="Electric Vehicle Data Profile Report")
profile.to_widgets() 

data.isnull().sum()

#Some reduntant columns will be dropped
data = data.drop(columns=['Legislative District', 'Vehicle Location', 'Electric Utility'])

data

#Fill missing values
data.fillna(data.mode().iloc[0], inplace=True) 
# since we are dealing with catergorical data

# Removing Duplicates
data.drop_duplicates(inplace=True)
print("Shape of Dataset after removing duplicates:", data.shape)

# Handling Outliers
# Using Z-score method for outlier detection
z_scores = np.abs(stats.zscore(data.select_dtypes(include=[np.number])))
data = data[(z_scores < 3).all(axis=1)]
# Keep rows where all numeric columns are within 3 standard deviations
print("Shape after removing outliers:", data.shape)

#Check count
data['Expected Price ($1k)'].unique()

# Count of unique values
data['Expected Price ($1k)'].describe()

# Assuming 'make' and 'model' are categorical features to be encoded
label_encoder = LabelEncoder()
data['Make'] = label_encoder.fit_transform(data['Make'])
data['Model'] = label_encoder.fit_transform(data['Model'])
data['Electric Range'] = label_encoder.fit_transform(data['Electric Range'])
data['Clean Alternative Fuel Vehicle (CAFV) Eligibility'] = label_encoder.fit_transform(data['Clean Alternative Fuel Vehicle (CAFV) Eligibility'])
data['Expected Price ($1k)'] = label_encoder.fit_transform(data['Expected Price ($1k)'])

# Selecting Features and Target Variable, Assuming 'price' is the target variable
X = data[['Make', 'Model', 'Electric Range', 'Clean Alternative Fuel Vehicle (CAFV) Eligibility']]  
# Features
y = data['Expected Price ($1k)']               
# Target variable

# Splitting Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Check unique values in the target column to identify non-numeric values
print(y.unique())

# Building and Training the SVM Model
svm_model = SVR(kernel='rbf')  
svm_model.fit(X_train, y_train)

# Model Evaluation
y_pred = svm_model.predict(X_test)
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print("\nModel Performance:")
print("Mean Absolute Error (MAE):", mae)
print("Mean Squared Error (MSE):", mse)
print("R-squared (RÂ²):", r2)

